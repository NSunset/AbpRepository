// <auto-generated />
using System;
using Frame.EntityFrameworkCore.MySql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Frame.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(NapManageDbContext))]
    [Migration("20191230055511_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Frame.Domain.DesignAmountConf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("ImageKind")
                        .HasColumnName("Image_Kind");

                    b.Property<int>("ImageType")
                        .HasColumnName("Image_Type");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.ToTable("Design_AmountConf");
                });

            modelBuilder.Entity("Frame.Domain.DesignLifeStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsShow");

                    b.Property<int>("Sort");

                    b.Property<string>("StatusName");

                    b.HasKey("Id");

                    b.ToTable("Design_LifeStatus");
                });

            modelBuilder.Entity("Frame.Domain.DesignStyle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuditStatus");

                    b.Property<DateTime?>("AuditTime");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("ImageKind")
                        .HasColumnName("Image_Kind");

                    b.Property<int>("ImageType")
                        .HasColumnName("Image_Type");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("PayStatus");

                    b.Property<DateTime?>("PayTime");

                    b.Property<string>("RefuseMsg");

                    b.Property<string>("StyleName");

                    b.Property<string>("StyleOrderNumber");

                    b.Property<long>("UserId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Design_Style");
                });

            modelBuilder.Entity("Frame.Domain.DesignStyleCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CategoryId");

                    b.Property<long>("StyleId");

                    b.HasKey("Id");

                    b.HasIndex("StyleId");

                    b.ToTable("Design_StyleCategory");
                });

            modelBuilder.Entity("Frame.Domain.DesignStyleImgDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Sort");

                    b.Property<long>("StyleId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("StyleId");

                    b.ToTable("Design_StyleImgDetail");
                });

            modelBuilder.Entity("Frame.Domain.DesignStyleLifeLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ActionResult");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLastAction");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long>("LifeStatusId");

                    b.Property<string>("Remark");

                    b.Property<long>("StyleId");

                    b.HasKey("Id");

                    b.HasIndex("StyleId");

                    b.ToTable("Design_StyleLifeLine");
                });

            modelBuilder.Entity("Frame.Domain.DesignUserInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Avatar");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("IdCard");

                    b.Property<string>("IdCardFront");

                    b.Property<string>("IdCardReverse");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("IsValidIdCard");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Mobile");

                    b.Property<string>("NickName");

                    b.Property<string>("OpenId");

                    b.Property<string>("RealName");

                    b.HasKey("Id");

                    b.ToTable("Design_UserInfo");
                });

            modelBuilder.Entity("Frame.Domain.ManagePayDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long>("ManagePayHistoryId");

                    b.Property<long>("StyleId");

                    b.HasKey("Id");

                    b.HasIndex("ManagePayHistoryId");

                    b.ToTable("Manage_PayDetail");
                });

            modelBuilder.Entity("Frame.Domain.ManagePayHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ActualAmount");

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("IncludeOrderNum");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("PayStatus");

                    b.Property<string>("Remark");

                    b.Property<decimal>("TaxRate");

                    b.Property<long>("UserId");

                    b.Property<string>("WXOrderNumber");

                    b.Property<decimal>("WithholdingTaxAmount");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Manage_PayHistory");
                });

            modelBuilder.Entity("Frame.Domain.ManagePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("FatherId");

                    b.Property<string>("Ioc")
                        .HasMaxLength(100);

                    b.Property<string>("PerName")
                        .HasMaxLength(100);

                    b.Property<string>("PerValue")
                        .HasMaxLength(200);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Manage_Permission");
                });

            modelBuilder.Entity("Frame.Domain.ManageRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("FatherId");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("RoleName");

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.ToTable("Manage_Role");
                });

            modelBuilder.Entity("Frame.Domain.ManageRolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ManageRoleId");

                    b.Property<long>("PermissionId");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("ManageRoleId");

                    b.ToTable("Manage_Role_Permission");
                });

            modelBuilder.Entity("Frame.Domain.ManageUserInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Passwd");

                    b.HasKey("Id");

                    b.ToTable("Manage_UserInfo");
                });

            modelBuilder.Entity("Frame.Domain.ManageUserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ManageUserInfoId");

                    b.Property<long>("RoleId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ManageUserInfoId");

                    b.ToTable("Manage_User_Role");
                });

            modelBuilder.Entity("Frame.Domain.DesignStyle", b =>
                {
                    b.HasOne("Frame.Domain.DesignUserInfo", "DesignUserInfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Frame.Domain.DesignStyleCategory", b =>
                {
                    b.HasOne("Frame.Domain.DesignStyle")
                        .WithMany("DesignStyleCategory")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Frame.Domain.DesignStyleImgDetail", b =>
                {
                    b.HasOne("Frame.Domain.DesignStyle")
                        .WithMany("DesignStyleImgDetail")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Frame.Domain.DesignStyleLifeLine", b =>
                {
                    b.HasOne("Frame.Domain.DesignStyle")
                        .WithMany("DesignStyleLifeLine")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Frame.Domain.ManagePayDetail", b =>
                {
                    b.HasOne("Frame.Domain.ManagePayHistory")
                        .WithMany("ManagePayDetailList")
                        .HasForeignKey("ManagePayHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Frame.Domain.ManagePayHistory", b =>
                {
                    b.HasOne("Frame.Domain.DesignUserInfo", "DesignUserInfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Frame.Domain.ManageRolePermission", b =>
                {
                    b.HasOne("Frame.Domain.ManageRole")
                        .WithMany("ManageRolePermissions")
                        .HasForeignKey("ManageRoleId");
                });

            modelBuilder.Entity("Frame.Domain.ManageUserRole", b =>
                {
                    b.HasOne("Frame.Domain.ManageUserInfo")
                        .WithMany("ManageUserRoles")
                        .HasForeignKey("ManageUserInfoId");
                });
#pragma warning restore 612, 618
        }
    }
}
